name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: arc-runner-set

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Set up Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.9
    - name: Build with Maven
      env:
        ART_USER: ${{ secrets.ART_USER }}
        ART_PASS: ${{ secrets.ART_PASS }}
      run: mvn clean test package deploy -DskipTests -s .mvn/settings.xml
    - name: Generate Test Report Summary
      run: |
        mkdir -p reports
        > reports/test-summary.md
        # Convert JUnit XML reports to Markdown format
        for report in target/surefire-reports/*.xml; do
          python3 <<EOT >> reports/test-summary.md
import xml.etree.ElementTree as ET
import sys
import os

def parse_junit_xml(file):
    tree = ET.parse(file)
    root = tree.getroot()
    summary = []
    for testcase in root.findall('.//testcase'):
        classname = testcase.attrib.get('classname', 'Unknown')
        name = testcase.attrib.get('name', 'Unknown')
        failure = testcase.find('failure')
        if failure is not None:
            summary.append("❌ **{}**.{}: Failed".format(classname, name))
        else:
            summary.append("✅ **{}**.{}: Passed".format(classname, name))
    return '\n'.join(summary)

print(parse_junit_xml('${report}'))
EOT
        done
        # Print the summary to the GitHub summary
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        cat reports/test-summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: hello-world-jar
        path: target/hello-world-1.0.0-SNAPSHOT.jar

  build-and-push-docker:
    runs-on: myvm
    needs: build
    env:
      ART_URL: reg.mevijay.dev
      REPO: demo
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: hello-world-jar
        path: ./target/
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: reg.mevijay.dev
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker images
        docker build -t $ART_URL/$REPO/hello-world:latest .
        docker push $ART_URL/$REPO/hello-world:latest
