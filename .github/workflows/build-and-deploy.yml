name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: arc-runner-set

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: 'maven'
    - name: Set up Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.9
    - name: Build with Maven
      env:
        ART_USER: ${{ secrets.ART_USER }}
        ART_PASS: ${{ secrets.ART_PASS }}
      run: mvn clean test package deploy -s .mvn/settings.xml
      id: maven-build
      
    - name: Generate Test Report Summary
      run: |
        mkdir -p reports
        
        # Create summary file
        echo "## Test Results" > $GITHUB_STEP_SUMMARY
        
        # Extract Maven test results directly from Maven output
        echo "### Maven Test Summary" >> $GITHUB_STEP_SUMMARY
        
        # Extract the Maven test summary line from the previous step
        mvn_output=$(cat target/surefire-reports/TEST-*.xml | grep -o 'tests="[0-9]*" failures="[0-9]*" errors="[0-9]*" skipped="[0-9]*"' | head -1)
        tests=$(echo "$mvn_output" | grep -o 'tests="[0-9]*"' | cut -d'"' -f2)
        failures=$(echo "$mvn_output" | grep -o 'failures="[0-9]*"' | cut -d'"' -f2)
        errors=$(echo "$mvn_output" | grep -o 'errors="[0-9]*"' | cut -d'"' -f2)
        skipped=$(echo "$mvn_output" | grep -o 'skipped="[0-9]*"' | cut -d'"' -f2)
        passed=$((tests - failures - errors - skipped))
        
        echo "- **Tests run:** $tests" >> $GITHUB_STEP_SUMMARY
        echo "- **Passed:** $passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed:** $failures" >> $GITHUB_STEP_SUMMARY
        echo "- **Errors:** $errors" >> $GITHUB_STEP_SUMMARY
        echo "- **Skipped:** $skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if test reports exist
        if [ -d "target/surefire-reports" ]; then
          echo "### Test Classes" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Class | Tests | Passed | Failed | Errors | Skipped |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          # Process individual test reports
          for report in target/surefire-reports/*.xml; do
            if [ -f "$report" ]; then
              # Get test class name from XML
              class_name=$(grep -o 'classname="[^"]*"' "$report" | head -1 | sed 's/classname="//;s/"//')
              
              # If no classname in XML, get from filename
              if [ -z "$class_name" ]; then
                base_name=$(basename "$report" .xml)
                class_name=${base_name#TEST-}
              fi
              
              # Get test counts directly from XML summary
              report_summary=$(cat "$report" | grep -o 'tests="[0-9]*" failures="[0-9]*" errors="[0-9]*" skipped="[0-9]*"' | head -1)
              test_count=$(echo "$report_summary" | grep -o 'tests="[0-9]*"' | cut -d'"' -f2)
              failure_count=$(echo "$report_summary" | grep -o 'failures="[0-9]*"' | cut -d'"' -f2)
              error_count=$(echo "$report_summary" | grep -o 'errors="[0-9]*"' | cut -d'"' -f2)
              skipped_count=$(echo "$report_summary" | grep -o 'skipped="[0-9]*"' | cut -d'"' -f2)
              
              # Calculate passed tests
              passed_tests=$((test_count - failure_count - error_count - skipped_count))
              
              # Add row to summary table (using proper table syntax)
              echo "| $class_name | $test_count | $passed_tests | $failure_count | $error_count | $skipped_count |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Result Details section (collapsible)
          echo "<details><summary>Test Method Details</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for report in target/surefire-reports/*.xml; do
            if [ -f "$report" ]; then
              # Get class name
              class_name=$(grep -o 'classname="[^"]*"' "$report" | head -1 | sed 's/classname="//;s/"//')
              if [ -z "$class_name" ]; then
                base_name=$(basename "$report" .xml)
                class_name=${base_name#TEST-}
              fi
              
              echo "#### $class_name" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Test Method | Result | Time (sec) |" >> $GITHUB_STEP_SUMMARY
              echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
              
              # Extract testcase elements and process them
              grep -A 3 "<testcase " "$report" | while read -r line; do
                if [[ $line == *"<testcase "* ]]; then
                  test_name=$(echo "$line" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
                  test_time=$(echo "$line" | sed -n 's/.*time="\([^"]*\)".*/\1/p')
                  
                  # Default to passed
                  status="✅ Passed"
                  
                  # Check next lines for failure/error
                  read -r next_line
                  if [[ $next_line == *"<failure"* ]]; then
                    status="❌ Failed"
                  elif [[ $next_line == *"<error"* ]]; then
                    status="⚠️ Error"
                  elif [[ $next_line == *"<skipped"* ]]; then
                    status="⏭️ Skipped"
                  fi
                  
                  echo "| $test_name | $status | $test_time |" >> $GITHUB_STEP_SUMMARY
                fi
              done
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "⚠️ No test reports found in target/surefire-reports" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Display test coverage from JaCoCo if available
        if [ -f "target/site/jacoco/index.html" ]; then
          echo "### Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          
          # Extract overall coverage from jacoco.xml if available
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "#### Overall Coverage" >> $GITHUB_STEP_SUMMARY
            
            # Extract coverage metrics
            line_covered=$(grep -o 'type="LINE" covered="[0-9]*"' "target/site/jacoco/jacoco.xml" | head -1 | grep -o 'covered="[0-9]*"' | cut -d'"' -f2)
            line_missed=$(grep -o 'type="LINE" missed="[0-9]*"' "target/site/jacoco/jacoco.xml" | head -1 | grep -o 'missed="[0-9]*"' | cut -d'"' -f2)
            branch_covered=$(grep -o 'type="BRANCH" covered="[0-9]*"' "target/site/jacoco/jacoco.xml" | head -1 | grep -o 'covered="[0-9]*"' | cut -d'"' -f2)
            branch_missed=$(grep -o 'type="BRANCH" missed="[0-9]*"' "target/site/jacoco/jacoco.xml" | head -1 | grep -o 'missed="[0-9]*"' | cut -d'"' -f2)
            
            # Calculate percentages
            if [ -n "$line_covered" ] && [ -n "$line_missed" ]; then
              line_total=$((line_covered + line_missed))
              if [ "$line_total" -gt 0 ]; then
                line_pct=$(( 100 * line_covered / line_total ))
                echo "- **Line Coverage**: $line_pct% ($line_covered of $line_total lines)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            if [ -n "$branch_covered" ] && [ -n "$branch_missed" ]; then
              branch_total=$((branch_covered + branch_missed))
              if [ "$branch_total" -gt 0 ]; then
                branch_pct=$(( 100 * branch_covered / branch_total ))
                echo "- **Branch Coverage**: $branch_pct% ($branch_covered of $branch_total branches)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "#### Coverage Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Class | Line Coverage | Branch Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          # Try to find and process coverage data files
          if [ -d "target/site/jacoco" ]; then
            find "target/site/jacoco" -name "*.html" | grep -v "index.html" | while read -r coverage_file; do
              class_name=$(basename "$coverage_file" .html)
              package_path=$(dirname "$coverage_file" | sed "s|target/site/jacoco/||")
              package_name=${package_path//\//.}
              
              # Extract coverage percentages from HTML
              line_coverage=$(grep -o 'Total[^%]*%' "$coverage_file" | head -1 | grep -o '[0-9.]*%')
              branch_coverage=$(grep -o 'Total[^%]*%' "$coverage_file" | tail -1 | grep -o '[0-9.]*%')
              
              # Default values if not found
              line_coverage=${line_coverage:-"N/A"}
              branch_coverage=${branch_coverage:-"N/A"}
              
              echo "| $package_name | $class_name | $line_coverage | $branch_coverage |" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "JaCoCo coverage report generated. Check artifacts for details." >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: hello-world-jar
        path: target/hello-world-1.0.0-SNAPSHOT.jar

    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          target/surefire-reports/
          target/site/jacoco/
        if-no-files-found: ignore

  build-and-push-docker:
    runs-on: myvm
    needs: build
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip docker]') }}
    env:
      ART_URL: reg.mevijay.dev
      REPO: demo
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: hello-world-jar
        path: ./target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: reg.mevijay.dev
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker images
        docker build -t $ART_URL/$REPO/hello-world:latest .
        docker push $ART_URL/$REPO/hello-world:latest
